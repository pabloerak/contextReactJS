{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Context1","createContext","Context2","Provider","children","value","Componente","console","log","this","context","Consumer","valor1","valor2","Component","Componente2","useContext","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sMAEMA,EAAWC,wBAAc,qBACzBC,EAAWD,wBAAc,sBAEzBE,EAAW,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAClB,OACE,cAACJ,EAASG,SAAV,CAAmBE,MAAM,UAAzB,SACE,cAACH,EAASC,SAAV,CAAmBE,MAAM,UAAzB,SACGD,OAOHE,E,4JACJ,WAEE,OADAC,QAAQC,IAAIC,KAAKC,SAEf,cAACV,EAASW,SAAV,UAEI,SAAAC,GAAM,OACJ,cAACV,EAASS,SAAV,UACG,SAAAE,GAAM,OAAI,wCAASD,EAAT,YAAmBC,e,GARnBC,aAiBnBC,EAAc,WAClB,IAAMH,EAASI,qBAAWhB,GACpBa,EAASG,qBAAWd,GAC1B,OACE,wCAASU,EAAT,YAAmBC,MAcRI,EATH,WACV,OACE,eAAC,EAAD,WACE,cAAC,EAAD,IACA,cAAC,EAAD,QClCSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d0b0f38c.chunk.js","sourcesContent":["import { Component, createContext, useContext } from 'react'\n\nconst Context1 = createContext('mi primer context')\nconst Context2 = createContext('mi segundo context')\n\nconst Provider = ({ children }) => {\n  return (\n    <Context1.Provider value='valor 1'>\n      <Context2.Provider value='valor 2'>\n        {children}\n      </Context2.Provider>\n    </Context1.Provider>\n  )\n}\n\n//Esta es la manera de acceder a multiples contextos desde clases\nclass Componente extends Component {\n  render() {\n    console.log(this.context)\n    return(\n      <Context1.Consumer>\n        {\n          valor1 =>\n            <Context2.Consumer>\n              {valor2 => <div>{`${valor1} ${valor2}`}</div>}\n            </Context2.Consumer>\n        }\n      </Context1.Consumer>\n    )\n  }\n}\n\n//Esta es la manera de acceder a multiples contextos desde componentes funcionales\nconst Componente2 = () => {\n  const valor1 = useContext(Context1)\n  const valor2 = useContext(Context2)\n  return (\n    <div>{`${valor1} ${valor2}`}</div>\n  )\n}\n\n\nconst App = () => {\n  return (\n    <Provider>\n      <Componente />\n      <Componente2 />\n    </Provider>\n  )\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}